{"ast":null,"code":"var _jsxFileName = \"/Users/christiangould/personal/connect4_online/cnn4/src/components/ConnectBoard/ConnectBoard.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport ConnectRow from '../ConnectRow/ConnectRow';\nimport Grid2 from '@mui/material/Unstable_Grid2/Grid2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ConnectBoard() {\n  _s();\n  const [board, setBoard] = useState([]);\n\n  // Set up the board at the beginning of the game\n  useEffect(() => {\n    const newBoard = [];\n    for (let i = 0; i < 6; i++) {\n      newBoard.push([]);\n      for (let j = 0; j < 7; j++) {\n        newBoard[i].push(1);\n      }\n    }\n    setBoard(newBoard);\n  }, []);\n  function insertPieceAtCol(col, player) {\n    // Check if the column has an open space\n    if (board[col].includes(0)) {\n      for (let i = 0; i < 6; i++) {\n        if (board[i][col] === 0) {\n          continue;\n        } else if (board[i][col] !== 0) {\n          board[i - 1][col] = player;\n          break;\n        }\n      }\n    } else {\n      // If the column is full, do nothing\n      return;\n    }\n  }\n\n  // visualize a connect 4 board\n  return /*#__PURE__*/_jsxDEV(Grid2, {\n    container: true,\n    spacing: 0,\n    direction: \"row\",\n    children: board.map((row, i) => /*#__PURE__*/_jsxDEV(Grid2, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(ConnectRow, {\n        row: row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(ConnectBoard, \"jMNr9OUCnGXRnWCrgJjYZl+B82M=\");\n_c = ConnectBoard;\nvar _c;\n$RefreshReg$(_c, \"ConnectBoard\");","map":{"version":3,"names":["useState","useEffect","ConnectRow","Grid2","ConnectBoard","board","setBoard","newBoard","i","push","j","insertPieceAtCol","col","player","includes","map","row"],"sources":["/Users/christiangould/personal/connect4_online/cnn4/src/components/ConnectBoard/ConnectBoard.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport ConnectRow from '../ConnectRow/ConnectRow';\nimport Grid2 from '@mui/material/Unstable_Grid2/Grid2';\n\nexport default function ConnectBoard() {\n  const [board, setBoard] = useState([]);\n\n  // Set up the board at the beginning of the game\n  useEffect(() => {\n    const newBoard = [];\n    for (let i = 0; i < 6; i++) {\n      newBoard.push([]);\n      for (let j = 0; j < 7; j++) {\n        newBoard[i].push(1);\n      }\n    }\n    setBoard(newBoard);\n  }, []);\n\n  function insertPieceAtCol(col, player) {\n    // Check if the column has an open space\n    if (board[col].includes(0)) {\n      for (let i = 0; i < 6; i++) {\n        if (board[i][col] === 0) {\n          continue;\n        }\n        else if (board[i][col] !== 0) {\n          board[i - 1][col] = player;\n          break;\n        }\n      }\n    }\n    else {\n      // If the column is full, do nothing\n      return;\n    }\n  }\n\n  // visualize a connect 4 board\n  return (\n    <Grid2 container spacing={0}\n    direction=\"row\"\n    >\n      {board.map((row, i) => (\n        <Grid2 item xs={12}>\n          <ConnectRow row={row} />\n        </Grid2>\n      ))}\n    </Grid2>\n  );\n\n}"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,KAAK,MAAM,oCAAoC;AAAC;AAEvD,eAAe,SAASC,YAAY,GAAG;EAAA;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMM,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,QAAQ,CAACE,IAAI,CAAC,EAAE,CAAC;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1BH,QAAQ,CAACC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;MACrB;IACF;IACAH,QAAQ,CAACC,QAAQ,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,SAASI,gBAAgB,CAACC,GAAG,EAAEC,MAAM,EAAE;IACrC;IACA,IAAIR,KAAK,CAACO,GAAG,CAAC,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAE;MAC1B,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,IAAIH,KAAK,CAACG,CAAC,CAAC,CAACI,GAAG,CAAC,KAAK,CAAC,EAAE;UACvB;QACF,CAAC,MACI,IAAIP,KAAK,CAACG,CAAC,CAAC,CAACI,GAAG,CAAC,KAAK,CAAC,EAAE;UAC5BP,KAAK,CAACG,CAAC,GAAG,CAAC,CAAC,CAACI,GAAG,CAAC,GAAGC,MAAM;UAC1B;QACF;MACF;IACF,CAAC,MACI;MACH;MACA;IACF;EACF;;EAEA;EACA,oBACE,QAAC,KAAK;IAAC,SAAS;IAAC,OAAO,EAAE,CAAE;IAC5B,SAAS,EAAC,KAAK;IAAA,UAEZR,KAAK,CAACU,GAAG,CAAC,CAACC,GAAG,EAAER,CAAC,kBAChB,QAAC,KAAK;MAAC,IAAI;MAAC,EAAE,EAAE,EAAG;MAAA,uBACjB,QAAC,UAAU;QAAC,GAAG,EAAEQ;MAAI;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QAE3B;EAAC;IAAA;IAAA;IAAA;EAAA,QACI;AAGZ;AAAC,GA/CuBZ,YAAY;AAAA,KAAZA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}