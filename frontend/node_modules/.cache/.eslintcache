[{"/usr/src/app/src/index.js":"1","/usr/src/app/src/App.js":"2","/usr/src/app/src/reportWebVitals.js":"3","/usr/src/app/src/components/ConnectBoard/ConnectBoard.jsx":"4","/usr/src/app/src/api/MoveApi.js":"5","/usr/src/app/src/api/apiConfig.js":"6"},{"size":535,"mtime":1670967255326,"results":"7","hashOfConfig":"8"},{"size":205,"mtime":1670968240970,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1670967255327,"results":"10","hashOfConfig":"8"},{"size":2724,"mtime":1671007928280,"results":"11","hashOfConfig":"8"},{"size":621,"mtime":1671059742209,"results":"12","hashOfConfig":"8"},{"size":141,"mtime":1671059804737,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1c85yqv",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/usr/src/app/src/index.js",[],[],"/usr/src/app/src/App.js",[],[],"/usr/src/app/src/reportWebVitals.js",[],[],"/usr/src/app/src/components/ConnectBoard/ConnectBoard.jsx",["33","34","35"],[],"import { useState, useEffect } from 'react';\nimport Grid2 from '@mui/material/Unstable_Grid2/Grid2';\nimport empty from '../../assets/BoardImages/empty.png';\nimport yellow from '../../assets/BoardImages/yellow.png';\nimport red from '../../assets/BoardImages/red.png';\nimport nothing from '../../assets/BoardImages/space.png';\nimport { getMove } from '../../api/MoveApi';\n\nexport default function ConnectBoard() {\n  const [board, setBoard] = useState([]);\n  const [player, setPlayer] = useState(1);\n  const colNums = [0, 1, 2, 3, 4, 5, 6];\n  const [aiTurn, setAITurn] = useState(false);\n\n  // Set up the board at the beginning of the game\n  useEffect(() => {\n    const newBoard = [];\n    for (let i = 0; i < 6; i++) {\n      newBoard.push([]);\n      for (let j = 0; j < 7; j++) {\n        newBoard[i].push(0);\n      }\n    }\n    setBoard(newBoard);\n  }, []);\n\n  function runAITurn() {\n    console.log(\"calling update\")\n    getMove(board, player).then((res) => {\n      console.log(\"got response from getMove\")\n      console.log(res);\n      insertPieceAtCol(res.got, -player, false);\n    });\n  }\n\n  function insertPieceAtCol(col, player, runAI) {\n    var newBoard = [...board];\n    // Check if the column has an open space\n    if (newBoard[0][col] === 0) {\n      for (let i = 0; i < 6; i++) {\n        if (newBoard[i][col] !== 0) {\n          newBoard[i - 1][col] = player;\n          break;\n        }\n        else if (i === 5) {\n          newBoard[i][col] = player;\n          break;\n        }\n      }\n    }\n    else {\n      // If the column is full, do nothing\n      return;\n    }\n    setBoard(newBoard);\n\n    if (runAI) {\n      runAITurn();\n    }\n  }\n\n  // visualize a connect 4 board\n  return (\n    <>\n      <Grid2 container spacing={0}\n      direction=\"row\"\n      >\n        {board.map((row, i) => (\n          <Grid2 item xs={12}>\n            <Grid2 container spacing={0}\n              direction={\"row\"}\n            >\n                {row.map((col, i) => (\n                  <Grid2 item xs={1.25}\n                    onClick={() => insertPieceAtCol(i, player, true)}\n                  >\n                    {\n                      (col === 0) ? <img src={empty} alt=\"empty piece\"></img> : (col === -1) ? <img src={yellow} alt=\"yellow piece\"></img> : <img src={red} alt=\"red piece\"></img>\n                    }\n                  </Grid2>\n                ))}\n              </Grid2>\n          </Grid2>\n        ))}\n\n      </Grid2>\n\n      <Grid2 container spacing={0}\n        direction={\"row\"}\n      >\n        {colNums.map((x) => (\n          <Grid2 item xs={1.25} onClick={() => { insertPieceAtCol(x, player, true) }}>\n            <img src={nothing} alt=\"empty piece\"></img>\n          </Grid2>\n        ))}\n      </Grid2>\n    </>\n  );\n\n}","/usr/src/app/src/api/MoveApi.js",[],[],"/usr/src/app/src/api/apiConfig.js",[],[],{"ruleId":"36","severity":1,"message":"37","line":11,"column":18,"nodeType":"38","messageId":"39","endLine":11,"endColumn":27},{"ruleId":"36","severity":1,"message":"40","line":13,"column":10,"nodeType":"38","messageId":"39","endLine":13,"endColumn":16},{"ruleId":"36","severity":1,"message":"41","line":13,"column":18,"nodeType":"38","messageId":"39","endLine":13,"endColumn":27},"no-unused-vars","'setPlayer' is assigned a value but never used.","Identifier","unusedVar","'aiTurn' is assigned a value but never used.","'setAITurn' is assigned a value but never used."]